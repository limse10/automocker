{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Mocker","props","copyToClipboard","e","navigator","clipboard","writeText","state","mocked","then","console","log","err","error","preventDefault","value","handleChange","bind","handleSubmit","event","this","setState","target","text","output","i","length","Math","random","charAt","toUpperCase","toLowerCase","join","mock","onSubmit","onChange","class","size","onClick","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAiBMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA6BRC,gBAAkB,SAACC,GACjB,GAAKC,UAAUC,UAAf,CAIA,IACED,UAAUC,UACPC,UAAU,EAAKC,MAAMC,QACrBC,KAAKC,QAAQC,IAAI,WACpB,MAAOC,GACPF,QAAQG,MAAM,kBAAmBD,GAEnCT,EAAEW,mBAxCF,EAAKP,MAAQ,CAAEQ,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,yDAQNE,GACXC,KAAKC,SAAS,CACZN,MAAOI,EAAMG,OAAOP,MACpBP,OAAQW,EAAMG,OAAOP,U,mCAIZI,GAEXA,EAAML,mB,2BAEHS,GAEH,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC3BE,KAAKC,SAAW,GAClBJ,EAAOC,GAAKF,EAAKM,OAAOJ,GAAGK,cAE3BN,EAAOC,GAAKF,EAAKM,OAAOJ,GAAGM,cAG/B,OAAOP,EAAOQ,KAAK,M,+BAkBnB,OADAZ,KAAKb,MAAMC,OAASY,KAAKa,KAAKb,KAAKb,MAAMQ,OAEvC,gCACE,sBAAMmB,SAAUd,KAAKF,aAArB,SACE,gCACE,cAAC,IAAD,CACEH,MAAOK,KAAKb,MAAMQ,MAClBoB,SAAUf,KAAKJ,mBAIrB,cAAC,IAAD,CAAkBD,MAAOK,KAAKb,MAAMC,SACpC,qBAAK4B,MAAM,OAAX,SACE,cAAC,IAAD,CAAeC,KAAM,GAAIC,QAASlB,KAAKlB,2B,GA3D5BqC,IAAMC,WAkEZC,EA7Ef,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,0BAEE,cAAC,EAAD,UCCOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cf649e20.chunk.js","sourcesContent":["import \"./App.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport ClipboardIcon from \"react-clipboard-icon\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Begin Mocking\n        <Mocker></Mocker>\n      </header>\n    </div>\n  );\n}\n\nclass Mocker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value,\n      mocked: event.target.value,\n    });\n  }\n\n  handleSubmit(event) {\n    // alert(\"A name was submitted: \" + this.state.value);\n    event.preventDefault();\n  }\n  mock(text) {\n    var output = [];\n    for (var i = 0; i < text.length; i++) {\n      if (Math.random() > 0.5) {\n        output[i] = text.charAt(i).toUpperCase();\n      } else {\n        output[i] = text.charAt(i).toLowerCase();\n      }\n    }\n    return output.join(\"\");\n  }\n  copyToClipboard = (e) => {\n    if (!navigator.clipboard) {\n      // Clipboard API not available\n      return;\n    }\n    try {\n      navigator.clipboard\n        .writeText(this.state.mocked)\n        .then(console.log(\"copied\"));\n    } catch (err) {\n      console.error(\"Failed to copy!\", err);\n    }\n    e.preventDefault();\n  };\n  render() {\n    this.state.mocked = this.mock(this.state.value);\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <TextareaAutosize\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n        </form>\n        <TextareaAutosize value={this.state.mocked} />\n        <div class=\"clip\">\n          <ClipboardIcon size={40} onClick={this.copyToClipboard} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}